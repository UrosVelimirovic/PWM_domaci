
PWM_detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f4c  08002f4c  00003f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002f84  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002f84  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008174  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001619  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0000d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000732  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016668  00000000  00000000  0000e84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009abb  00000000  00000000  00024eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084373  00000000  00000000  0002e96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2ce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  000b2d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b536c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f34 	.word	0x08002f34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f34 	.word	0x08002f34

0800014c <calculate_PWM>:
uint32_t volatile frequency = 0;
uint32_t volatile period = 0;
float volatile duty = 0;

void calculate_PWM()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(rising_edge_2 > rising_edge_1)
 8000150:	4b2a      	ldr	r3, [pc, #168]	@ (80001fc <calculate_PWM+0xb0>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b2a      	ldr	r3, [pc, #168]	@ (8000200 <calculate_PWM+0xb4>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	429a      	cmp	r2, r3
 800015a:	d907      	bls.n	800016c <calculate_PWM+0x20>
	{
		period = rising_edge_2 - rising_edge_1;
 800015c:	4b27      	ldr	r3, [pc, #156]	@ (80001fc <calculate_PWM+0xb0>)
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	4b27      	ldr	r3, [pc, #156]	@ (8000200 <calculate_PWM+0xb4>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	1ad3      	subs	r3, r2, r3
 8000166:	4a27      	ldr	r2, [pc, #156]	@ (8000204 <calculate_PWM+0xb8>)
 8000168:	6013      	str	r3, [r2, #0]
 800016a:	e008      	b.n	800017e <calculate_PWM+0x32>
	}
	else
	{
		period = 1000 - (rising_edge_1 - rising_edge_2);
 800016c:	4b23      	ldr	r3, [pc, #140]	@ (80001fc <calculate_PWM+0xb0>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	4b23      	ldr	r3, [pc, #140]	@ (8000200 <calculate_PWM+0xb4>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	1ad3      	subs	r3, r2, r3
 8000176:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800017a:	4a22      	ldr	r2, [pc, #136]	@ (8000204 <calculate_PWM+0xb8>)
 800017c:	6013      	str	r3, [r2, #0]
	}
	//	10 timer ticks are 1000 microseconds. 1 timer tick is 100 microseconds
	period *= 100; // in microseconds
 800017e:	4b21      	ldr	r3, [pc, #132]	@ (8000204 <calculate_PWM+0xb8>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2264      	movs	r2, #100	@ 0x64
 8000184:	fb02 f303 	mul.w	r3, r2, r3
 8000188:	4a1e      	ldr	r2, [pc, #120]	@ (8000204 <calculate_PWM+0xb8>)
 800018a:	6013      	str	r3, [r2, #0]

	if(falling_edge > rising_edge_1)
 800018c:	4b1e      	ldr	r3, [pc, #120]	@ (8000208 <calculate_PWM+0xbc>)
 800018e:	681a      	ldr	r2, [r3, #0]
 8000190:	4b1b      	ldr	r3, [pc, #108]	@ (8000200 <calculate_PWM+0xb4>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	429a      	cmp	r2, r3
 8000196:	d907      	bls.n	80001a8 <calculate_PWM+0x5c>
	{
		active_time = falling_edge - rising_edge_1;
 8000198:	4b1b      	ldr	r3, [pc, #108]	@ (8000208 <calculate_PWM+0xbc>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	4b18      	ldr	r3, [pc, #96]	@ (8000200 <calculate_PWM+0xb4>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	1ad3      	subs	r3, r2, r3
 80001a2:	4a1a      	ldr	r2, [pc, #104]	@ (800020c <calculate_PWM+0xc0>)
 80001a4:	6013      	str	r3, [r2, #0]
 80001a6:	e008      	b.n	80001ba <calculate_PWM+0x6e>
	}
	else
	{
		active_time = 1000 - (rising_edge_1 - falling_edge);
 80001a8:	4b17      	ldr	r3, [pc, #92]	@ (8000208 <calculate_PWM+0xbc>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	4b14      	ldr	r3, [pc, #80]	@ (8000200 <calculate_PWM+0xb4>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	1ad3      	subs	r3, r2, r3
 80001b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80001b6:	4a15      	ldr	r2, [pc, #84]	@ (800020c <calculate_PWM+0xc0>)
 80001b8:	6013      	str	r3, [r2, #0]
	}

	// activeTime in microseconds
	active_time *= 100;
 80001ba:	4b14      	ldr	r3, [pc, #80]	@ (800020c <calculate_PWM+0xc0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2264      	movs	r2, #100	@ 0x64
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	4a11      	ldr	r2, [pc, #68]	@ (800020c <calculate_PWM+0xc0>)
 80001c6:	6013      	str	r3, [r2, #0]

//	duty = (active_time / period) * 100; // duty in %
//	frequency = 1 / (period / 1000); // 1 over period in seconds


	if(active_time >= 1800 && active_time <= 2200)
 80001c8:	4b10      	ldr	r3, [pc, #64]	@ (800020c <calculate_PWM+0xc0>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80001d0:	d30b      	bcc.n	80001ea <calculate_PWM+0x9e>
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <calculate_PWM+0xc0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f640 0298 	movw	r2, #2200	@ 0x898
 80001da:	4293      	cmp	r3, r2
 80001dc:	d805      	bhi.n	80001ea <calculate_PWM+0x9e>
	{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2102      	movs	r1, #2
 80001e2:	480b      	ldr	r0, [pc, #44]	@ (8000210 <calculate_PWM+0xc4>)
 80001e4:	f000 fe74 	bl	8000ed0 <HAL_GPIO_WritePin>
 80001e8:	e005      	b.n	80001f6 <calculate_PWM+0xaa>
	}
	else
	{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2102      	movs	r1, #2
 80001ee:	4808      	ldr	r0, [pc, #32]	@ (8000210 <calculate_PWM+0xc4>)
 80001f0:	f000 fe6e 	bl	8000ed0 <HAL_GPIO_WritePin>
	}

}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000c0 	.word	0x200000c0
 8000200:	200000bc 	.word	0x200000bc
 8000204:	200000cc 	.word	0x200000cc
 8000208:	200000c4 	.word	0x200000c4
 800020c:	200000c8 	.word	0x200000c8
 8000210:	40011000 	.word	0x40011000

08000214 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // rising edge on channel 1
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	7f1b      	ldrb	r3, [r3, #28]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d12b      	bne.n	800027c <HAL_TIM_IC_CaptureCallback+0x68>
	{
		if(capture_state == 0)
 8000224:	4b17      	ldr	r3, [pc, #92]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10e      	bne.n	800024c <HAL_TIM_IC_CaptureCallback+0x38>
		{
			rising_edge_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800022e:	2100      	movs	r1, #0
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f002 f92b 	bl	800248c <HAL_TIM_ReadCapturedValue>
 8000236:	4603      	mov	r3, r0
 8000238:	4a13      	ldr	r2, [pc, #76]	@ (8000288 <HAL_TIM_IC_CaptureCallback+0x74>)
 800023a:	6013      	str	r3, [r2, #0]
			capture_state++;
 800023c:	4b11      	ldr	r3, [pc, #68]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x70>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	3301      	adds	r3, #1
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000248:	701a      	strb	r2, [r3, #0]

			capture_state = 0;
		}
	}

}
 800024a:	e017      	b.n	800027c <HAL_TIM_IC_CaptureCallback+0x68>
		else if(capture_state == 1)
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x70>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	2b01      	cmp	r3, #1
 8000254:	d112      	bne.n	800027c <HAL_TIM_IC_CaptureCallback+0x68>
			rising_edge_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000256:	2100      	movs	r1, #0
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f002 f917 	bl	800248c <HAL_TIM_ReadCapturedValue>
 800025e:	4603      	mov	r3, r0
 8000260:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000262:	6013      	str	r3, [r2, #0]
			falling_edge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000264:	2104      	movs	r1, #4
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f002 f910 	bl	800248c <HAL_TIM_ReadCapturedValue>
 800026c:	4603      	mov	r3, r0
 800026e:	4a08      	ldr	r2, [pc, #32]	@ (8000290 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000270:	6013      	str	r3, [r2, #0]
			calculate_PWM();
 8000272:	f7ff ff6b 	bl	800014c <calculate_PWM>
			capture_state = 0;
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200000b8 	.word	0x200000b8
 8000288:	200000bc 	.word	0x200000bc
 800028c:	200000c0 	.word	0x200000c0
 8000290:	200000c4 	.word	0x200000c4

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fb26 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f818 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f968 	bl	8000574 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a4:	f000 f850 	bl	8000348 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002a8:	f000 f8ec 	bl	8000484 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80002ac:	2100      	movs	r1, #0
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <main+0x34>)
 80002b0:	f001 fc88 	bl	8001bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80002b4:	2104      	movs	r1, #4
 80002b6:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <main+0x34>)
 80002b8:	f001 fbc4 	bl	8001a44 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002bc:	2100      	movs	r1, #0
 80002be:	4803      	ldr	r0, [pc, #12]	@ (80002cc <main+0x38>)
 80002c0:	f001 fac6 	bl	8001850 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x30>
 80002c8:	20000028 	.word	0x20000028
 80002cc:	20000070 	.word	0x20000070

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fdfc 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fe1c 	bl	8000f44 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000312:	f000 f9bd 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f88a 	bl	8001448 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033a:	f000 f9a9 	bl	8000690 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	@ 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000382:	4b3f      	ldr	r3, [pc, #252]	@ (8000480 <MX_TIM2_Init+0x138>)
 8000384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800;
 800038a:	4b3d      	ldr	r3, [pc, #244]	@ (8000480 <MX_TIM2_Init+0x138>)
 800038c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b3b      	ldr	r3, [pc, #236]	@ (8000480 <MX_TIM2_Init+0x138>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000398:	4b39      	ldr	r3, [pc, #228]	@ (8000480 <MX_TIM2_Init+0x138>)
 800039a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800039e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <MX_TIM2_Init+0x138>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a6:	4b36      	ldr	r3, [pc, #216]	@ (8000480 <MX_TIM2_Init+0x138>)
 80003a8:	2280      	movs	r2, #128	@ 0x80
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ac:	4834      	ldr	r0, [pc, #208]	@ (8000480 <MX_TIM2_Init+0x138>)
 80003ae:	f001 f9a7 	bl	8001700 <HAL_TIM_Base_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003b8:	f000 f96a 	bl	8000690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003c6:	4619      	mov	r1, r3
 80003c8:	482d      	ldr	r0, [pc, #180]	@ (8000480 <MX_TIM2_Init+0x138>)
 80003ca:	f001 ff55 	bl	8002278 <HAL_TIM_ConfigClockSource>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003d4:	f000 f95c 	bl	8000690 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80003d8:	4829      	ldr	r0, [pc, #164]	@ (8000480 <MX_TIM2_Init+0x138>)
 80003da:	f001 fadb 	bl	8001994 <HAL_TIM_IC_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80003e4:	f000 f954 	bl	8000690 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80003ec:	2350      	movs	r3, #80	@ 0x50
 80003ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80003fc:	f107 031c 	add.w	r3, r7, #28
 8000400:	4619      	mov	r1, r3
 8000402:	481f      	ldr	r0, [pc, #124]	@ (8000480 <MX_TIM2_Init+0x138>)
 8000404:	f001 ffff 	bl	8002406 <HAL_TIM_SlaveConfigSynchro>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800040e:	f000 f93f 	bl	8000690 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000416:	2301      	movs	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	4815      	ldr	r0, [pc, #84]	@ (8000480 <MX_TIM2_Init+0x138>)
 800042c:	f001 fdc6 	bl	8001fbc <HAL_TIM_IC_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000436:	f000 f92b 	bl	8000690 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800043a:	2302      	movs	r3, #2
 800043c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800043e:	2302      	movs	r3, #2
 8000440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2204      	movs	r2, #4
 8000448:	4619      	mov	r1, r3
 800044a:	480d      	ldr	r0, [pc, #52]	@ (8000480 <MX_TIM2_Init+0x138>)
 800044c:	f001 fdb6 	bl	8001fbc <HAL_TIM_IC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000456:	f000 f91b 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	@ (8000480 <MX_TIM2_Init+0x138>)
 8000468:	f002 fcc8 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000472:	f000 f90d 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	3740      	adds	r7, #64	@ 0x40
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000028 	.word	0x20000028

08000484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08e      	sub	sp, #56	@ 0x38
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 0320 	add.w	r3, r7, #32
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
 80004b0:	615a      	str	r2, [r3, #20]
 80004b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004b4:	4b2d      	ldr	r3, [pc, #180]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000570 <MX_TIM3_Init+0xec>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004ba:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80004c6:	4b29      	ldr	r3, [pc, #164]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004c8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80004cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d4:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004d6:	2280      	movs	r2, #128	@ 0x80
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004da:	4824      	ldr	r0, [pc, #144]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004dc:	f001 f910 	bl	8001700 <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80004e6:	f000 f8d3 	bl	8000690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f4:	4619      	mov	r1, r3
 80004f6:	481d      	ldr	r0, [pc, #116]	@ (800056c <MX_TIM3_Init+0xe8>)
 80004f8:	f001 febe 	bl	8002278 <HAL_TIM_ConfigClockSource>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000502:	f000 f8c5 	bl	8000690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000506:	4819      	ldr	r0, [pc, #100]	@ (800056c <MX_TIM3_Init+0xe8>)
 8000508:	f001 f949 	bl	800179e <HAL_TIM_PWM_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000512:	f000 f8bd 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	4619      	mov	r1, r3
 8000524:	4811      	ldr	r0, [pc, #68]	@ (800056c <MX_TIM3_Init+0xe8>)
 8000526:	f002 fc69 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000530:	f000 f8ae 	bl	8000690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000534:	2360      	movs	r3, #96	@ 0x60
 8000536:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8000538:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800053c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <MX_TIM3_Init+0xe8>)
 800054e:	f001 fdd1 	bl	80020f4 <HAL_TIM_PWM_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000558:	f000 f89a 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <MX_TIM3_Init+0xe8>)
 800055e:	f000 f927 	bl	80007b0 <HAL_TIM_MspPostInit>

}
 8000562:	bf00      	nop
 8000564:	3738      	adds	r7, #56	@ 0x38
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000070 	.word	0x20000070
 8000570:	40000400 	.word	0x40000400

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b3d      	ldr	r3, [pc, #244]	@ (8000680 <MX_GPIO_Init+0x10c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a3c      	ldr	r2, [pc, #240]	@ (8000680 <MX_GPIO_Init+0x10c>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <MX_GPIO_Init+0x10c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b37      	ldr	r3, [pc, #220]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a36      	ldr	r2, [pc, #216]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b34      	ldr	r3, [pc, #208]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a30      	ldr	r2, [pc, #192]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <MX_GPIO_Init+0x10c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <MX_GPIO_Init+0x110>)
 80005ee:	f000 fc6f 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4824      	ldr	r0, [pc, #144]	@ (8000688 <MX_GPIO_Init+0x114>)
 80005f8:	f000 fc6a 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <MX_GPIO_Init+0x118>)
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <MX_GPIO_Init+0x110>)
 8000612:	f000 fad9 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4815      	ldr	r0, [pc, #84]	@ (8000684 <MX_GPIO_Init+0x110>)
 800062e:	f000 facb 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000632:	230c      	movs	r3, #12
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <MX_GPIO_Init+0x114>)
 8000646:	f000 fabf 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800064a:	2320      	movs	r3, #32
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <MX_GPIO_Init+0x114>)
 8000662:	f000 fab1 	bl	8000bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f000 fa75 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000670:	2028      	movs	r0, #40	@ 0x28
 8000672:	f000 fa8e 	bl	8000b92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40011000 	.word	0x40011000
 8000688:	40010800 	.word	0x40010800
 800068c:	10210000 	.word	0x10210000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <HAL_MspInit+0x60>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <HAL_MspInit+0x60>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800071e:	d12c      	bne.n	800077a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	61d3      	str	r3, [r2, #28]
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4619      	mov	r1, r3
 8000762:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <HAL_TIM_Base_MspInit+0xa8>)
 8000764:	f000 fa30 	bl	8000bc8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	201c      	movs	r0, #28
 800076e:	f000 f9f4 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000772:	201c      	movs	r0, #28
 8000774:	f000 fa0d 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000778:	e010      	b.n	800079c <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0b      	ldr	r2, [pc, #44]	@ (80007ac <HAL_TIM_Base_MspInit+0xac>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d10b      	bne.n	800079c <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	61d3      	str	r3, [r2, #28]
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa4>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40000400 	.word	0x40000400

080007b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <HAL_TIM_MspPostInit+0x58>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d117      	bne.n	8000800 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_TIM_MspPostInit+0x5c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <HAL_TIM_MspPostInit+0x5c>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <HAL_TIM_MspPostInit+0x5c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007e8:	2340      	movs	r3, #64	@ 0x40
 80007ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <HAL_TIM_MspPostInit+0x60>)
 80007fc:	f000 f9e4 	bl	8000bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40000400 	.word	0x40000400
 800080c:	40021000 	.word	0x40021000
 8000810:	40010800 	.word	0x40010800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f886 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <TIM2_IRQHandler+0x10>)
 8000872:	f001 fab3 	bl	8001ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000884:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000888:	f000 fb3a 	bl	8000f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff fff8 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a2:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b8:	4c09      	ldr	r4, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 fb11 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fce3 	bl	8000294 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	200000d4 	.word	0x200000d4

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f923 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff feca 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f93b 	bl	8000bae <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f903 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	@ (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000008 	.word	0x20000008
 8000994:	200000d0 	.word	0x200000d0

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	@ (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	200000d0 	.word	0x200000d0

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	@ (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	@ (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	@ (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	@ 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff90 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2d 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff42 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff35 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b08b      	sub	sp, #44	@ 0x2c
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e169      	b.n	8000eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8158 	bne.w	8000eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a9a      	ldr	r2, [pc, #616]	@ (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d05e      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c04:	4a98      	ldr	r2, [pc, #608]	@ (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d875      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a98      	ldr	r2, [pc, #608]	@ (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d058      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c10:	4a96      	ldr	r2, [pc, #600]	@ (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d86f      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c16:	4a96      	ldr	r2, [pc, #600]	@ (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d052      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c1c:	4a94      	ldr	r2, [pc, #592]	@ (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d869      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c22:	4a94      	ldr	r2, [pc, #592]	@ (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d04c      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c28:	4a92      	ldr	r2, [pc, #584]	@ (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d863      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c2e:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d046      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c34:	4a90      	ldr	r2, [pc, #576]	@ (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d85d      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c3a:	2b12      	cmp	r3, #18
 8000c3c:	d82a      	bhi.n	8000c94 <HAL_GPIO_Init+0xcc>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d859      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c42:	a201      	add	r2, pc, #4	@ (adr r2, 8000c48 <HAL_GPIO_Init+0x80>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000cc3 	.word	0x08000cc3
 8000c4c:	08000c9d 	.word	0x08000c9d
 8000c50:	08000caf 	.word	0x08000caf
 8000c54:	08000cf1 	.word	0x08000cf1
 8000c58:	08000cf7 	.word	0x08000cf7
 8000c5c:	08000cf7 	.word	0x08000cf7
 8000c60:	08000cf7 	.word	0x08000cf7
 8000c64:	08000cf7 	.word	0x08000cf7
 8000c68:	08000cf7 	.word	0x08000cf7
 8000c6c:	08000cf7 	.word	0x08000cf7
 8000c70:	08000cf7 	.word	0x08000cf7
 8000c74:	08000cf7 	.word	0x08000cf7
 8000c78:	08000cf7 	.word	0x08000cf7
 8000c7c:	08000cf7 	.word	0x08000cf7
 8000c80:	08000cf7 	.word	0x08000cf7
 8000c84:	08000cf7 	.word	0x08000cf7
 8000c88:	08000cf7 	.word	0x08000cf7
 8000c8c:	08000ca5 	.word	0x08000ca5
 8000c90:	08000cb9 	.word	0x08000cb9
 8000c94:	4a79      	ldr	r2, [pc, #484]	@ (8000e7c <HAL_GPIO_Init+0x2b4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e02c      	b.n	8000cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e029      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e024      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e01f      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	e01a      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e013      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	611a      	str	r2, [r3, #16]
          break;
 8000ce2:	e009      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	615a      	str	r2, [r3, #20]
          break;
 8000cee:	e003      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          break;
 8000cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	@ 0xff
 8000cfc:	d801      	bhi.n	8000d02 <HAL_GPIO_Init+0x13a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_Init+0x13e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3304      	adds	r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2bff      	cmp	r3, #255	@ 0xff
 8000d0c:	d802      	bhi.n	8000d14 <HAL_GPIO_Init+0x14c>
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x152>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	3b08      	subs	r3, #8
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	210f      	movs	r1, #15
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	6a39      	ldr	r1, [r7, #32]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d48:	4b4d      	ldr	r3, [pc, #308]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d60:	4a48      	ldr	r2, [pc, #288]	@ (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a40      	ldr	r2, [pc, #256]	@ (8000e88 <HAL_GPIO_Init+0x2c0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d013      	beq.n	8000db4 <HAL_GPIO_Init+0x1ec>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e8c <HAL_GPIO_Init+0x2c4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d00d      	beq.n	8000db0 <HAL_GPIO_Init+0x1e8>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3e      	ldr	r2, [pc, #248]	@ (8000e90 <HAL_GPIO_Init+0x2c8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d007      	beq.n	8000dac <HAL_GPIO_Init+0x1e4>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e94 <HAL_GPIO_Init+0x2cc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d101      	bne.n	8000da8 <HAL_GPIO_Init+0x1e0>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e004      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db4:	2300      	movs	r3, #0
 8000db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db8:	f002 0203 	and.w	r2, r2, #3
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dc6:	492f      	ldr	r1, [pc, #188]	@ (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	492c      	ldr	r1, [pc, #176]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4928      	ldr	r1, [pc, #160]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	4922      	ldr	r1, [pc, #136]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60cb      	str	r3, [r1, #12]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	491e      	ldr	r1, [pc, #120]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4918      	ldr	r1, [pc, #96]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4914      	ldr	r1, [pc, #80]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d021      	beq.n	8000e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	490e      	ldr	r1, [pc, #56]	@ (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
 8000e64:	e021      	b.n	8000eaa <HAL_GPIO_Init+0x2e2>
 8000e66:	bf00      	nop
 8000e68:	10320000 	.word	0x10320000
 8000e6c:	10310000 	.word	0x10310000
 8000e70:	10220000 	.word	0x10220000
 8000e74:	10210000 	.word	0x10210000
 8000e78:	10120000 	.word	0x10120000
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40011400 	.word	0x40011400
 8000e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_GPIO_Init+0x304>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4909      	ldr	r1, [pc, #36]	@ (8000ecc <HAL_GPIO_Init+0x304>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f ae8e 	bne.w	8000bdc <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	372c      	adds	r7, #44	@ 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eec:	e003      	b.n	8000ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	041a      	lsls	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f806 	bl	8000f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e272      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8087 	beq.w	8001072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f64:	4b92      	ldr	r3, [pc, #584]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d00c      	beq.n	8000f8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f70:	4b8f      	ldr	r3, [pc, #572]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d112      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f88:	d10b      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8a:	4b89      	ldr	r3, [pc, #548]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d06c      	beq.n	8001070 <HAL_RCC_OscConfig+0x12c>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d168      	bne.n	8001070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e24c      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x76>
 8000fac:	4b80      	ldr	r3, [pc, #512]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a7f      	ldr	r2, [pc, #508]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e02e      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x98>
 8000fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a7a      	ldr	r2, [pc, #488]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b78      	ldr	r3, [pc, #480]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a77      	ldr	r2, [pc, #476]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e01d      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0xbc>
 8000fe6:	4b72      	ldr	r3, [pc, #456]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a71      	ldr	r2, [pc, #452]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8001000:	4b6b      	ldr	r3, [pc, #428]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a6a      	ldr	r2, [pc, #424]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b68      	ldr	r3, [pc, #416]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a67      	ldr	r2, [pc, #412]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001016:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fcba 	bl	8000998 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fcb6 	bl	8000998 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	@ 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e200      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	4b5d      	ldr	r3, [pc, #372]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0xe4>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fca6 	bl	8000998 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fca2 	bl	8000998 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	@ 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1ec      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x10c>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d063      	beq.n	8001146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800107e:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108a:	4b49      	ldr	r3, [pc, #292]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b08      	cmp	r3, #8
 8001094:	d11c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x18c>
 8001096:	4b46      	ldr	r3, [pc, #280]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d116      	bne.n	80010d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x176>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e1c0      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b3d      	ldr	r3, [pc, #244]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4939      	ldr	r1, [pc, #228]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	e03a      	b.n	8001146 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d8:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fc5b 	bl	8000998 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc57 	bl	8000998 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1a1      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4927      	ldr	r1, [pc, #156]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <HAL_RCC_OscConfig+0x270>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fc3a 	bl	8000998 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fc36 	bl	8000998 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e180      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03a      	beq.n	80011c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d019      	beq.n	800118e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_RCC_OscConfig+0x274>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fc1a 	bl	8000998 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fc16 	bl	8000998 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e160      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 fa9c 	bl	80016c4 <RCC_Delay>
 800118c:	e01c      	b.n	80011c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_RCC_OscConfig+0x274>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fc00 	bl	8000998 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	e00f      	b.n	80011bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fbfc 	bl	8000998 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d908      	bls.n	80011bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e146      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	42420000 	.word	0x42420000
 80011b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	4b92      	ldr	r3, [pc, #584]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e9      	bne.n	800119c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a6 	beq.w	8001322 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b8b      	ldr	r3, [pc, #556]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a87      	ldr	r2, [pc, #540]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b85      	ldr	r3, [pc, #532]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fe:	2301      	movs	r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b82      	ldr	r3, [pc, #520]	@ (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d118      	bne.n	8001240 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120e:	4b7f      	ldr	r3, [pc, #508]	@ (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a7e      	ldr	r2, [pc, #504]	@ (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121a:	f7ff fbbd 	bl	8000998 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001222:	f7ff fbb9 	bl	8000998 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b64      	cmp	r3, #100	@ 0x64
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e103      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	4b75      	ldr	r3, [pc, #468]	@ (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x312>
 8001248:	4b6f      	ldr	r3, [pc, #444]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a6e      	ldr	r2, [pc, #440]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6213      	str	r3, [r2, #32]
 8001254:	e02d      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x334>
 800125e:	4b6a      	ldr	r3, [pc, #424]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a69      	ldr	r2, [pc, #420]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a66      	ldr	r2, [pc, #408]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	e01c      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d10c      	bne.n	800129a <HAL_RCC_OscConfig+0x356>
 8001280:	4b61      	ldr	r3, [pc, #388]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a60      	ldr	r2, [pc, #384]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	4b5e      	ldr	r3, [pc, #376]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a5d      	ldr	r2, [pc, #372]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 800129a:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a5a      	ldr	r2, [pc, #360]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	4b58      	ldr	r3, [pc, #352]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a57      	ldr	r2, [pc, #348]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d015      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb6d 	bl	8000998 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fb69 	bl	8000998 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e0b1      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ee      	beq.n	80012c2 <HAL_RCC_OscConfig+0x37e>
 80012e4:	e014      	b.n	8001310 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fb57 	bl	8000998 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fb53 	bl	8000998 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e09b      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001304:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1ee      	bne.n	80012ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d105      	bne.n	8001322 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001316:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a3b      	ldr	r2, [pc, #236]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8087 	beq.w	800143a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d061      	beq.n	80013fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d146      	bne.n	80013ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001340:	4b33      	ldr	r3, [pc, #204]	@ (8001410 <HAL_RCC_OscConfig+0x4cc>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fb27 	bl	8000998 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fb23 	bl	8000998 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e06d      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001374:	d108      	bne.n	8001388 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4921      	ldr	r1, [pc, #132]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a19      	ldr	r1, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	430b      	orrs	r3, r1
 800139a:	491b      	ldr	r1, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x4cc>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff faf7 	bl	8000998 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff faf3 	bl	8000998 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e03d      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x46a>
 80013cc:	e035      	b.n	800143a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_RCC_OscConfig+0x4cc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fae0 	bl	8000998 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fadc 	bl	8000998 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e026      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x498>
 80013fa:	e01e      	b.n	800143a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e019      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_RCC_OscConfig+0x500>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	429a      	cmp	r2, r3
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0d0      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b67      	ldr	r3, [pc, #412]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4965      	ldr	r1, [pc, #404]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a58      	ldr	r2, [pc, #352]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d040      	beq.n	8001568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d115      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e073      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06b      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001526:	4b39      	ldr	r3, [pc, #228]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f023 0203 	bic.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4936      	ldr	r1, [pc, #216]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001538:	f7ff fa2e 	bl	8000998 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	e00a      	b.n	8001556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff fa2a 	bl	8000998 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e053      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 020c 	and.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	429a      	cmp	r2, r3
 8001566:	d1eb      	bne.n	8001540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d210      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4922      	ldr	r1, [pc, #136]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	490a      	ldr	r1, [pc, #40]	@ (8001610 <HAL_RCC_ClockConfig+0x1c8>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_RCC_ClockConfig+0x1cc>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_RCC_ClockConfig+0x1d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f98c 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	08002f4c 	.word	0x08002f4c
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001636:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d002      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x30>
 8001646:	2b08      	cmp	r3, #8
 8001648:	d003      	beq.n	8001652 <HAL_RCC_GetSysClockFreq+0x36>
 800164a:	e027      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800164e:	613b      	str	r3, [r7, #16]
      break;
 8001650:	e027      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d010      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0c5b      	lsrs	r3, r3, #17
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800167e:	fb03 f202 	mul.w	r2, r3, r2
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e004      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	613b      	str	r3, [r7, #16]
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800169e:	613b      	str	r3, [r7, #16]
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	693b      	ldr	r3, [r7, #16]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	007a1200 	.word	0x007a1200
 80016b8:	08002f5c 	.word	0x08002f5c
 80016bc:	08002f6c 	.word	0x08002f6c
 80016c0:	003d0900 	.word	0x003d0900

080016c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <RCC_Delay+0x34>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <RCC_Delay+0x38>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0a5b      	lsrs	r3, r3, #9
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e0:	bf00      	nop
  }
  while (Delay --);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	60fa      	str	r2, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f9      	bne.n	80016e0 <RCC_Delay+0x1c>
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000000 	.word	0x20000000
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e041      	b.n	8001796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7fe ffea 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f000 ff0c 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e041      	b.n	8001834 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f839 	bl	800183c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f000 febd 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_TIM_PWM_Start+0x24>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e022      	b.n	80018ba <HAL_TIM_PWM_Start+0x6a>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d109      	bne.n	800188e <HAL_TIM_PWM_Start+0x3e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	bf14      	ite	ne
 8001886:	2301      	movne	r3, #1
 8001888:	2300      	moveq	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	e015      	b.n	80018ba <HAL_TIM_PWM_Start+0x6a>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d109      	bne.n	80018a8 <HAL_TIM_PWM_Start+0x58>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b01      	cmp	r3, #1
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e008      	b.n	80018ba <HAL_TIM_PWM_Start+0x6a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e05e      	b.n	8001980 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <HAL_TIM_PWM_Start+0x82>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018d0:	e013      	b.n	80018fa <HAL_TIM_PWM_Start+0xaa>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d104      	bne.n	80018e2 <HAL_TIM_PWM_Start+0x92>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018e0:	e00b      	b.n	80018fa <HAL_TIM_PWM_Start+0xaa>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d104      	bne.n	80018f2 <HAL_TIM_PWM_Start+0xa2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018f0:	e003      	b.n	80018fa <HAL_TIM_PWM_Start+0xaa>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fa55 	bl	8002db2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_TIM_PWM_Start+0x138>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d107      	bne.n	8001922 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001920:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_TIM_PWM_Start+0x138>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00e      	beq.n	800194a <HAL_TIM_PWM_Start+0xfa>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001934:	d009      	beq.n	800194a <HAL_TIM_PWM_Start+0xfa>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a14      	ldr	r2, [pc, #80]	@ (800198c <HAL_TIM_PWM_Start+0x13c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d004      	beq.n	800194a <HAL_TIM_PWM_Start+0xfa>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <HAL_TIM_PWM_Start+0x140>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d111      	bne.n	800196e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d010      	beq.n	800197e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196c:	e007      	b.n	800197e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40000400 	.word	0x40000400
 8001990:	40000800 	.word	0x40000800

08001994 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e041      	b.n	8001a2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f839 	bl	8001a32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f000 fdc2 	bl	800255c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d104      	bne.n	8001a5e <HAL_TIM_IC_Start+0x1a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e013      	b.n	8001a86 <HAL_TIM_IC_Start+0x42>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d104      	bne.n	8001a6e <HAL_TIM_IC_Start+0x2a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	e00b      	b.n	8001a86 <HAL_TIM_IC_Start+0x42>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d104      	bne.n	8001a7e <HAL_TIM_IC_Start+0x3a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	e003      	b.n	8001a86 <HAL_TIM_IC_Start+0x42>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <HAL_TIM_IC_Start+0x54>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e013      	b.n	8001ac0 <HAL_TIM_IC_Start+0x7c>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d104      	bne.n	8001aa8 <HAL_TIM_IC_Start+0x64>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e00b      	b.n	8001ac0 <HAL_TIM_IC_Start+0x7c>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d104      	bne.n	8001ab8 <HAL_TIM_IC_Start+0x74>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e003      	b.n	8001ac0 <HAL_TIM_IC_Start+0x7c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06d      	b.n	8001bae <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d104      	bne.n	8001ae2 <HAL_TIM_IC_Start+0x9e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ae0:	e013      	b.n	8001b0a <HAL_TIM_IC_Start+0xc6>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d104      	bne.n	8001af2 <HAL_TIM_IC_Start+0xae>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af0:	e00b      	b.n	8001b0a <HAL_TIM_IC_Start+0xc6>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d104      	bne.n	8001b02 <HAL_TIM_IC_Start+0xbe>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b00:	e003      	b.n	8001b0a <HAL_TIM_IC_Start+0xc6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_IC_Start+0xd6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b18:	e013      	b.n	8001b42 <HAL_TIM_IC_Start+0xfe>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_IC_Start+0xe6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b28:	e00b      	b.n	8001b42 <HAL_TIM_IC_Start+0xfe>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_IC_Start+0xf6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b38:	e003      	b.n	8001b42 <HAL_TIM_IC_Start+0xfe>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 f931 	bl	8002db2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_TIM_IC_Start+0x174>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00e      	beq.n	8001b78 <HAL_TIM_IC_Start+0x134>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b62:	d009      	beq.n	8001b78 <HAL_TIM_IC_Start+0x134>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <HAL_TIM_IC_Start+0x178>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_TIM_IC_Start+0x134>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <HAL_TIM_IC_Start+0x17c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d010      	beq.n	8001bac <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9a:	e007      	b.n	8001bac <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40012c00 	.word	0x40012c00
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40000800 	.word	0x40000800

08001bc4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_TIM_IC_Start_IT+0x1e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	e013      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x46>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d104      	bne.n	8001bf2 <HAL_TIM_IC_Start_IT+0x2e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e00b      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x46>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d104      	bne.n	8001c02 <HAL_TIM_IC_Start_IT+0x3e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e003      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x46>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d104      	bne.n	8001c1c <HAL_TIM_IC_Start_IT+0x58>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e013      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x80>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d104      	bne.n	8001c2c <HAL_TIM_IC_Start_IT+0x68>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e00b      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x80>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d104      	bne.n	8001c3c <HAL_TIM_IC_Start_IT+0x78>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e003      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c4c:	7b7b      	ldrb	r3, [r7, #13]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0b8      	b.n	8001dc8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_IC_Start_IT+0xa2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c64:	e013      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xca>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_IC_Start_IT+0xb2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c74:	e00b      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xca>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_IC_Start_IT+0xc2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c84:	e003      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xca>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_IC_Start_IT+0xda>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	e013      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0x102>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_IC_Start_IT+0xea>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cac:	e00b      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0x102>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_IC_Start_IT+0xfa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cbc:	e003      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0x102>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d841      	bhi.n	8001d50 <HAL_TIM_IC_Start_IT+0x18c>
 8001ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <HAL_TIM_IC_Start_IT+0x110>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001d09 	.word	0x08001d09
 8001cd8:	08001d51 	.word	0x08001d51
 8001cdc:	08001d51 	.word	0x08001d51
 8001ce0:	08001d51 	.word	0x08001d51
 8001ce4:	08001d1b 	.word	0x08001d1b
 8001ce8:	08001d51 	.word	0x08001d51
 8001cec:	08001d51 	.word	0x08001d51
 8001cf0:	08001d51 	.word	0x08001d51
 8001cf4:	08001d2d 	.word	0x08001d2d
 8001cf8:	08001d51 	.word	0x08001d51
 8001cfc:	08001d51 	.word	0x08001d51
 8001d00:	08001d51 	.word	0x08001d51
 8001d04:	08001d3f 	.word	0x08001d3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0202 	orr.w	r2, r2, #2
 8001d16:	60da      	str	r2, [r3, #12]
      break;
 8001d18:	e01d      	b.n	8001d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0204 	orr.w	r2, r2, #4
 8001d28:	60da      	str	r2, [r3, #12]
      break;
 8001d2a:	e014      	b.n	8001d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0208 	orr.w	r2, r2, #8
 8001d3a:	60da      	str	r2, [r3, #12]
      break;
 8001d3c:	e00b      	b.n	8001d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0210 	orr.w	r2, r2, #16
 8001d4c:	60da      	str	r2, [r3, #12]
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      break;
 8001d54:	bf00      	nop
  }

  if (status == HAL_OK)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d134      	bne.n	8001dc6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 f824 	bl	8002db2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_TIM_IC_Start_IT+0x20c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00e      	beq.n	8001d92 <HAL_TIM_IC_Start_IT+0x1ce>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7c:	d009      	beq.n	8001d92 <HAL_TIM_IC_Start_IT+0x1ce>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <HAL_TIM_IC_Start_IT+0x210>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d004      	beq.n	8001d92 <HAL_TIM_IC_Start_IT+0x1ce>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_TIM_IC_Start_IT+0x214>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d111      	bne.n	8001db6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b06      	cmp	r3, #6
 8001da2:	d010      	beq.n	8001dc6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	e007      	b.n	8001dc6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800

08001ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d020      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01b      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0202 	mvn.w	r2, #2
 8001e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe f9f4 	bl	8000214 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fb79 	bl	8002526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fb7f 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d020      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0204 	mvn.w	r2, #4
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe f9ce 	bl	8000214 <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fb53 	bl	8002526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb59 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d020      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0208 	mvn.w	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe f9a8 	bl	8000214 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fb2d 	bl	8002526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb33 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe f982 	bl	8000214 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fb07 	bl	8002526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb0d 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0201 	mvn.w	r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fae6 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 ffaf 	bl	8002eca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fadd 	bl	800254a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0220 	mvn.w	r2, #32
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 ff82 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_IC_ConfigChannel+0x1e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e088      	b.n	80020ec <HAL_TIM_IC_ConfigChannel+0x130>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001ff8:	f000 fd38 	bl	8002a6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020c 	bic.w	r2, r2, #12
 800200a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6999      	ldr	r1, [r3, #24]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	619a      	str	r2, [r3, #24]
 800201e:	e060      	b.n	80020e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d11c      	bne.n	8002060 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002036:	f000 fda1 	bl	8002b7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002048:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6999      	ldr	r1, [r3, #24]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	619a      	str	r2, [r3, #24]
 800205e:	e040      	b.n	80020e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11b      	bne.n	800209e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002076:	f000 fdec 	bl	8002c52 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 020c 	bic.w	r2, r2, #12
 8002088:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69d9      	ldr	r1, [r3, #28]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	61da      	str	r2, [r3, #28]
 800209c:	e021      	b.n	80020e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d11c      	bne.n	80020de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80020b4:	f000 fe08 	bl	8002cc8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80020c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69d9      	ldr	r1, [r3, #28]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	021a      	lsls	r2, r3, #8
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	e001      	b.n	80020e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800210e:	2302      	movs	r3, #2
 8002110:	e0ae      	b.n	8002270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	f200 809f 	bhi.w	8002260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002122:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	0800215d 	.word	0x0800215d
 800212c:	08002261 	.word	0x08002261
 8002130:	08002261 	.word	0x08002261
 8002134:	08002261 	.word	0x08002261
 8002138:	0800219d 	.word	0x0800219d
 800213c:	08002261 	.word	0x08002261
 8002140:	08002261 	.word	0x08002261
 8002144:	08002261 	.word	0x08002261
 8002148:	080021df 	.word	0x080021df
 800214c:	08002261 	.word	0x08002261
 8002150:	08002261 	.word	0x08002261
 8002154:	08002261 	.word	0x08002261
 8002158:	0800221f 	.word	0x0800221f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fa68 	bl	8002638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0208 	orr.w	r2, r2, #8
 8002176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6999      	ldr	r1, [r3, #24]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	619a      	str	r2, [r3, #24]
      break;
 800219a:	e064      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 faae 	bl	8002704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]
      break;
 80021dc:	e043      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 faf7 	bl	80027d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0204 	bic.w	r2, r2, #4
 8002208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69d9      	ldr	r1, [r3, #28]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	61da      	str	r2, [r3, #28]
      break;
 800221c:	e023      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fb41 	bl	80028ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	61da      	str	r2, [r3, #28]
      break;
 800225e:	e002      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	75fb      	strb	r3, [r7, #23]
      break;
 8002264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIM_ConfigClockSource+0x1c>
 8002290:	2302      	movs	r3, #2
 8002292:	e0b4      	b.n	80023fe <HAL_TIM_ConfigClockSource+0x186>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022cc:	d03e      	beq.n	800234c <HAL_TIM_ConfigClockSource+0xd4>
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022d2:	f200 8087 	bhi.w	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022da:	f000 8086 	beq.w	80023ea <HAL_TIM_ConfigClockSource+0x172>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	d87f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b70      	cmp	r3, #112	@ 0x70
 80022e6:	d01a      	beq.n	800231e <HAL_TIM_ConfigClockSource+0xa6>
 80022e8:	2b70      	cmp	r3, #112	@ 0x70
 80022ea:	d87b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b60      	cmp	r3, #96	@ 0x60
 80022ee:	d050      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x11a>
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d877      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b50      	cmp	r3, #80	@ 0x50
 80022f6:	d03c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0xfa>
 80022f8:	2b50      	cmp	r3, #80	@ 0x50
 80022fa:	d873      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d058      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d86f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b30      	cmp	r3, #48	@ 0x30
 8002306:	d064      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	2b30      	cmp	r3, #48	@ 0x30
 800230a:	d86b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d060      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b20      	cmp	r3, #32
 8002312:	d867      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	2b10      	cmp	r3, #16
 800231a:	d05a      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 800231c:	e062      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800232e:	f000 fd21 	bl	8002d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
      break;
 800234a:	e04f      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800235c:	f000 fd0a 	bl	8002d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800236e:	609a      	str	r2, [r3, #8]
      break;
 8002370:	e03c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	461a      	mov	r2, r3
 8002380:	f000 fbce 	bl	8002b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2150      	movs	r1, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fcd8 	bl	8002d40 <TIM_ITRx_SetConfig>
      break;
 8002390:	e02c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 fc28 	bl	8002bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2160      	movs	r1, #96	@ 0x60
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fcc8 	bl	8002d40 <TIM_ITRx_SetConfig>
      break;
 80023b0:	e01c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 fbae 	bl	8002b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fcb8 	bl	8002d40 <TIM_ITRx_SetConfig>
      break;
 80023d0:	e00c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f000 fcaf 	bl	8002d40 <TIM_ITRx_SetConfig>
      break;
 80023e2:	e003      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e000      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_TIM_SlaveConfigSynchro+0x18>
 800241a:	2302      	movs	r3, #2
 800241c:	e031      	b.n	8002482 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fa89 	bl	8002948 <TIM_SlaveTimer_SetConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e018      	b.n	8002482 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800245e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800246e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d831      	bhi.n	8002504 <HAL_TIM_ReadCapturedValue+0x78>
 80024a0:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	08002505 	.word	0x08002505
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002505 	.word	0x08002505
 80024b8:	080024e7 	.word	0x080024e7
 80024bc:	08002505 	.word	0x08002505
 80024c0:	08002505 	.word	0x08002505
 80024c4:	08002505 	.word	0x08002505
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	08002505 	.word	0x08002505
 80024d0:	08002505 	.word	0x08002505
 80024d4:	08002505 	.word	0x08002505
 80024d8:	080024fb 	.word	0x080024fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	60fb      	str	r3, [r7, #12]

      break;
 80024e4:	e00f      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	60fb      	str	r3, [r7, #12]

      break;
 80024ee:	e00a      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	60fb      	str	r3, [r7, #12]

      break;
 80024f8:	e005      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	60fb      	str	r3, [r7, #12]

      break;
 8002502:	e000      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002504:	bf00      	nop
  }

  return tmpreg;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a2f      	ldr	r2, [pc, #188]	@ (800262c <TIM_Base_SetConfig+0xd0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00b      	beq.n	800258c <TIM_Base_SetConfig+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d007      	beq.n	800258c <TIM_Base_SetConfig+0x30>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a2c      	ldr	r2, [pc, #176]	@ (8002630 <TIM_Base_SetConfig+0xd4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0x30>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a2b      	ldr	r2, [pc, #172]	@ (8002634 <TIM_Base_SetConfig+0xd8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d108      	bne.n	800259e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a22      	ldr	r2, [pc, #136]	@ (800262c <TIM_Base_SetConfig+0xd0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002630 <TIM_Base_SetConfig+0xd4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0x62>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002634 <TIM_Base_SetConfig+0xd8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <TIM_Base_SetConfig+0xd0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d103      	bne.n	8002604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]
  }
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40012c00 	.word	0x40012c00
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800

08002638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f023 0201 	bic.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <TIM_OC1_SetConfig+0xc8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10c      	bne.n	80026ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0308 	bic.w	r3, r3, #8
 800269a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <TIM_OC1_SetConfig+0xc8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 0210 	bic.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0320 	bic.w	r3, r3, #32
 800274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <TIM_OC2_SetConfig+0xd0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10d      	bne.n	8002780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800277e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <TIM_OC2_SetConfig+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d113      	bne.n	80027b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800278e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <TIM_OC3_SetConfig+0xd0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10d      	bne.n	8002852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800283c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <TIM_OC3_SetConfig+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d113      	bne.n	8002882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	621a      	str	r2, [r3, #32]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40012c00 	.word	0x40012c00

080028ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	031b      	lsls	r3, r3, #12
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0f      	ldr	r2, [pc, #60]	@ (8002944 <TIM_OC4_SetConfig+0x98>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d109      	bne.n	8002920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00

08002948 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002964:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 0307 	bic.w	r3, r3, #7
 8002976:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b70      	cmp	r3, #112	@ 0x70
 8002990:	d01a      	beq.n	80029c8 <TIM_SlaveTimer_SetConfig+0x80>
 8002992:	2b70      	cmp	r3, #112	@ 0x70
 8002994:	d860      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 8002996:	2b60      	cmp	r3, #96	@ 0x60
 8002998:	d054      	beq.n	8002a44 <TIM_SlaveTimer_SetConfig+0xfc>
 800299a:	2b60      	cmp	r3, #96	@ 0x60
 800299c:	d85c      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 800299e:	2b50      	cmp	r3, #80	@ 0x50
 80029a0:	d046      	beq.n	8002a30 <TIM_SlaveTimer_SetConfig+0xe8>
 80029a2:	2b50      	cmp	r3, #80	@ 0x50
 80029a4:	d858      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 80029a6:	2b40      	cmp	r3, #64	@ 0x40
 80029a8:	d019      	beq.n	80029de <TIM_SlaveTimer_SetConfig+0x96>
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	d854      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 80029ae:	2b30      	cmp	r3, #48	@ 0x30
 80029b0:	d055      	beq.n	8002a5e <TIM_SlaveTimer_SetConfig+0x116>
 80029b2:	2b30      	cmp	r3, #48	@ 0x30
 80029b4:	d850      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d051      	beq.n	8002a5e <TIM_SlaveTimer_SetConfig+0x116>
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d84c      	bhi.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d04d      	beq.n	8002a5e <TIM_SlaveTimer_SetConfig+0x116>
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d04b      	beq.n	8002a5e <TIM_SlaveTimer_SetConfig+0x116>
 80029c6:	e047      	b.n	8002a58 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	f000 f9cc 	bl	8002d74 <TIM_ETR_SetConfig>
      break;
 80029dc:	e040      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d101      	bne.n	80029ea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e03b      	b.n	8002a62 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a10:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
      break;
 8002a2e:	e017      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f000 f86f 	bl	8002b20 <TIM_TI1_ConfigInputStage>
      break;
 8002a42:	e00d      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a50:	461a      	mov	r2, r3
 8002a52:	f000 f8cf 	bl	8002bf4 <TIM_TI2_ConfigInputStage>
      break;
 8002a56:	e003      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	e000      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002a5e:	bf00      	nop
  }

  return status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0201 	bic.w	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <TIM_TI1_SetConfig+0xa8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <TIM_TI1_SetConfig+0x46>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa0:	d007      	beq.n	8002ab2 <TIM_TI1_SetConfig+0x46>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <TIM_TI1_SetConfig+0xac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <TIM_TI1_SetConfig+0x46>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <TIM_TI1_SetConfig+0xb0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <TIM_TI1_SetConfig+0x4a>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <TIM_TI1_SetConfig+0x4c>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e003      	b.n	8002ad6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 030a 	and.w	r3, r3, #10
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800

08002b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 030a 	bic.w	r3, r3, #10
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	621a      	str	r2, [r3, #32]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0210 	bic.w	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	031b      	lsls	r3, r3, #12
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0210 	bic.w	r2, r3, #16
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	621a      	str	r2, [r3, #32]
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b087      	sub	sp, #28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	031b      	lsls	r3, r3, #12
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	031b      	lsls	r3, r3, #12
 8002d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f043 0307 	orr.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e046      	b.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e60:	d009      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a10      	ldr	r2, [pc, #64]	@ (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <memset>:
 8002edc:	4603      	mov	r3, r0
 8002ede:	4402      	add	r2, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8002f24 <__libc_init_array+0x38>)
 8002ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8002f28 <__libc_init_array+0x3c>)
 8002ef4:	1b64      	subs	r4, r4, r5
 8002ef6:	10a4      	asrs	r4, r4, #2
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	f000 f81a 	bl	8002f34 <_init>
 8002f00:	2600      	movs	r6, #0
 8002f02:	4d0a      	ldr	r5, [pc, #40]	@ (8002f2c <__libc_init_array+0x40>)
 8002f04:	4c0a      	ldr	r4, [pc, #40]	@ (8002f30 <__libc_init_array+0x44>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08002f70 	.word	0x08002f70
 8002f28:	08002f70 	.word	0x08002f70
 8002f2c:	08002f70 	.word	0x08002f70
 8002f30:	08002f74 	.word	0x08002f74

08002f34 <_init>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr

08002f40 <_fini>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	bf00      	nop
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr
